Backend: Laravel Product CRUD API Endpoints

Step-1: Setup Laravel Project
First, create a new Laravel project:

[command]:
composer create-project --prefer-dist laravel/laravel product-api
cd product-api



Step-2. Configure Database


In your .env file, set up your database connection:

[code]:
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password


Step-3: Create Product Model and Migration


Generate a model and migration for the Product:

[command]:
php artisan make:model Product -m


Modify the migration file database/migrations/xxxx_xx_xx_create_products_table.php:

[code]:
public function up()
{
    Schema::create('products', function (Blueprint $table) {
        $table->id();
        //$table->string('name');
        //$table->text('description')->nullable();
        //$table->decimal('price', 8, 2);
        //$table->integer('quantity');
        $table->timestamps();
    });
}


Run the migration:

[command]:
php artisan migrate


///////////////////////////////////////////
Step-4: Define API Routes
///////////////////////////////////////////

In routes/api.php, define the routes for the Product CRUD:

[code]:
use App\Http\Controllers\ProductController;

Route::apiResource('products', ProductController::class);

///////////////////////////////////////////////
Step-5: Create Product Controller
///////////////////////////////////////////////

Generate a controller:

[command]:
php artisan make:controller ProductController --api
Implement the controller methods in app/Http/Controllers/ProductController.php:


[code]:
namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Http\Request;

class ProductController extends Controller
{
    public function index()
    {
        return Product::all();
    }

    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'price' => 'required|numeric',
            'quantity' => 'required|integer',
        ]);

        return Product::create($request->all());
    }

    public function show($id)
    {
        return Product::findOrFail($id);
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'price' => 'required|numeric',
            'quantity' => 'required|integer',
        ]);

        $product = Product::findOrFail($id);
        $product->update($request->all());

        return $product;
    }

    public function destroy($id)
    {
        $product = Product::findOrFail($id);
        $product->delete();

        return response()->noContent();
    }
}

======================================================


Frontend: Vue.js Product CRUD

///////////////////////////////////////
Step-1: Setup Vue Project
///////////////////////////////////////


Create a new Vue project using Vue CLI:

[command]:
vue create product-frontend
cd product-frontend
npm install axios vue-router

///////////////////////////////////////
Step-2: Project Structure
///////////////////////////////////////
Your project structure will look like this:


product-frontend/
├── public/
│   ├── index.html
├── src/
│   ├── assets/
│   ├── components/
│   │   ├── ProductList.vue
│   │   ├── ProductForm.vue
│   │   ├── ProductDetail.vue
│   ├── router/
│   │   └── index.js
│   ├── views/
│   │   ├── Home.vue
│   │   ├── Product.vue
│   ├── axios.js
│   ├── App.vue
│   ├── main.js
├── package.json
└── ...

/////////////////////////////////////////
Step-3: Configure Axios
/////////////////////////////////////////


Create an axios instance in src/axios.js:

[code]:
import axios from 'axios';

const instance = axios.create({
    baseURL: 'http://your-laravel-api-url/api'
});

export default instance;


////////////////////////////////////////////
Step-4: Vue Router
/////////////////////////////////////////////


Set up the router in src/router/index.js:

[code]:
import Vue from 'vue';
import Router from 'vue-router';
import Home from '../views/Home.vue';
import Product from '../views/Product.vue';
import ProductForm from '../components/ProductForm.vue';
import ProductDetail from '../components/ProductDetail.vue';
import ProductList from '../components/ProductList.vue';

Vue.use(Router);

export default new Router({
  mode: 'history',
  routes: [
    {
      path: '/',
      name: 'Home',
      component: Home
    },
    {
      path: '/products',
      component: Product,
      children: [
        {
          path: '',
          component: ProductList
        },
        {
          path: 'create',
          component: ProductForm
        },
        {
          path: ':id',
          component: ProductDetail
        },
        {
          path: 'edit/:id',
          component: ProductForm
        }
      ]
    }
  ]
});


///////////////////////////////////////////////
Step-5: Vue Components
///////////////////////////////////////////////


Create the components for product CRUD operations.

=> ProductList.vue

[code]:
<template>
  <div>
    <h1>Product List</h1>
    <router-link to="/products/create">Create Product</router-link>
    <ul>
      <li v-for="product in products" :key="product.id">
        {{ product.name }} - {{ product.price }}
        <router-link :to="'/products/' + product.id">View</router-link>
        <button @click="deleteProduct(product.id)">Delete</button>
      </li>
    </ul>
  </div>
</template>

<script>
import axios from '../axios';

export default {
  data() {
    return {
      products: []
    };
  },
  created() {
    this.fetchProducts();
  },
  methods: {
    fetchProducts() {
      axios.get('/products').then(response => {
        this.products = response.data;
      });
    },
    deleteProduct(id) {
      axios.delete(`/products/${id}`).then(() => {
        this.fetchProducts();
      });
    }
  }
};
</script>



=> ProductForm.vue

<template>
  <div>
    <h1>{{ product.id ? 'Edit' : 'Create' }} Product</h1>
    <form @submit.prevent="saveProduct">
      <div>
        <label>Name:</label>
        <input v-model="product.name" type="text" required />
      </div>
      <div>
        <label>Description:</label>
        <textarea v-model="product.description"></textarea>
      </div>
      <div>
        <label>Price:</label>
        <input v-model="product.price" type="number" required />
      </div>
      <div>
        <label>Quantity:</label>
        <input v-model="product.quantity" type="number" required />
      </div>
      <button type="submit">Save</button>
    </form>
  </div>
</template>

<script>
import axios from '../axios';

export default {
  data() {
    return {
      product: {
        name: '',
        description: '',
        price: 0,
        quantity: 0
      }
    };
  },
  created() {
    if (this.$route.params.id) {
      this.fetchProduct();
    }
  },
  methods: {
    fetchProduct() {
      axios.get(`/products/${this.$route.params.id}`).then(response => {
        this.product = response.data;
      });
    },
    saveProduct() {
      if (this.product.id) {
        axios.put(`/products/${this.product.id}`, this.product).then(() => {
          this.$router.push('/products');
        });
      } else {
        axios.post('/products', this.product).then(() => {
          this.$router.push('/products');
        });
      }
    }
  }
};
</script>


=> ProductDetail.vue
[code]:
<template>
  <div v-if="product">
    <h1>{{ product.name }}</h1>
    <p>{{ product.description }}</p>
    <p>{{ product.price }}</p>
    <p>{{ product.quantity }}</p>
    <router-link :to="'/products/edit/' + product.id">Edit</router-link>
  </div>
</template>

<script>
import axios from '../axios';

export default {
  data() {
    return {
      product: null
    };
  },
  created() {
    this.fetchProduct();
  },
  methods: {
    fetchProduct() {
      axios.get(`/products/${this.$route.params.id}`).then(response => {
        this.product = response.data;
      });
    }
  }
};
</script>

////////////////////////////////////////////
Step-6: Vue Views
//////////////////////////////////////////////

Set up the views.

=> Home.vue

[code]:

<template>
  <div>
    <h1>Welcome to Product Management</h1>
    <router-link to="/products">Manage Products</router-link>
  </div>
</template>

<script>
export default {
};
</script>



=> Product.vue


<template>
  <div>
    <router-view></router-view>
  </div>
</template>

<script>
export default {
};
</script>

//////////////////////////////////////
Step-7: Update App.vue
//////////////////////////////////////

<template>
  <div id="app">
    <router-view />
  </div>
</template>

<script>
export default {
};
</script>

///////////////////////////////////////////
Step-8: Update main.js
////////////////////////////////////////////

[code]:
import Vue from 'vue';
import App from './App.vue';
import router from './router';

Vue.config.productionTip = false;

new Vue({
  router,
  render: h => h(App),
}).$mount('#app');


/////////////////////////////////////////////
Testing Outputs
/////////////////////////////////////////////

Here are some example outputs for testing each endpoint:

///////////////////////////////////////////
GET /api/products
///////////////////////////////////////////

=> Response:
----------------------------------------------
[
  {
    "id": 1,
    "name": "Product A",
    "description": "Description for Product A",
    "price": 10.99,
    "quantity": 100,
    "created_at": "2024-06-07T12:00:00.000000Z",
    "updated_at": "2024-06-07T12:00:00.000000Z"
  },
  {
    "id": 2,
    "name": "Product B",
    "description": "Description for Product B",
    "price": 15.99,
    "quantity": 200,
    "created_at": "2024-06-07T12:00:00.000000Z",
    "updated_at": "2024-06-07T12:00:00.000000Z"
  }
]
-----------------------------------------------------

////////////////////////////////////////////
POST /api/products
/////////////////////////////////////////////


=>Request:

-----------------------------------------------
{
  "name": "Product C",
  "description": "Description for Product C",
  "price": 20.99,
  "quantity": 150
}
-------------------------------------------------

=> Response:

-----------------------------------------------
{
  "id": 3,
  "name": "Product C",
  "description": "Description for Product C",
  "price": 20.99,
  "quantity": 150,
  "created_at": "2024-06-07T12:00:00.000000Z",
  "updated_at": "2024-06-07T12:00:00.000000Z"
}
-------------------------------------------------

////////////////////////////////////////
GET /api/products/{id}
///////////////////////////////////////////

Response for ID 1:

------------------------------------------------
{
  "id": 1,
  "name": "Product A",
  "description": "Description for Product A",
  "price": 10.99,
  "quantity": 100,
  "created_at": "2024-06-07T12:00:00.000000Z",
  "updated_at": "2024-06-07T12:00:00.000000Z"
}

--------------------------------------------

///////////////////////////////////////////////
PUT /api/products/{id}
/////////////////////////////////////////////////

Request for ID 1:

------------------------------------------------
{
  "name": "Updated Product A",
  "description": "Updated Description for Product A",
  "price": 11.99,
  "quantity": 110
}
------------------------------------------------
Response:

-------------------------------------------------
{
  "id": 1,
  "name": "Updated Product A",
  "description": "Updated Description for Product A",
  "price": 11.99,
  "quantity": 110,
  "created_at": "2024-06-07T12:00:00.000000Z",
  "updated_at": "2024-06-07T12:00:00.000000Z"
}
-------------------------------------------------

//////////////////////////////////////////////////
DELETE /api/products/{id}
////////////////////////////////////////////////////

Response for ID 1:

------------------------------------------------
{
  "message": "Product deleted successfully"
}
--------------------------------------------------


By following this guide, you will have a Laravel backend providing a product CRUD API 
and a Vue.js frontend to manage these products.